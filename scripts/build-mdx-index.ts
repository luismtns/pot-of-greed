import fs from 'fs'
import path from 'path'

type MDXMeta = {
  title?: string
  description?: string
  [key: string]: any
}

const dir = path.join(process.cwd(), 'content', 'lps')
const out = path.join(dir, 'index.ts')

if (!fs.existsSync(dir)) {
  console.error('No content/lps directory found')
  process.exit(1)
}

const files = fs.readdirSync(dir).filter((f) => f.endsWith('.mdx'))

let content = `// This file is generated by scripts/build-mdx-index.ts\n`
content += `// Do not edit manually. This index contains metadata only (no MDX imports).\n\n`

content += `export type MDXMeta = { title?: string; description?: string; [key: string]: any }\n\n`
content += `export const MDX_PAGES: { [slug: string]: { meta: MDXMeta } } = {\n`

files.forEach((f) => {
  const slug = f.replace(/\.mdx$/, '')
  const fp = path.join(dir, f)
  const raw = fs.readFileSync(fp, 'utf8')

  // extract YAML frontmatter between first two '---' markers
  const fmMatch = raw.match(/^-{3}[\s\S]*?-{3}/)
  let title: string | undefined
  let description: string | undefined
  if (fmMatch) {
    const fm = fmMatch[0]
    const titleMatch = fm.match(/title:\s*(?:['"])?([^'"\n]+)(?:['"])?/i)
    const descMatch = fm.match(/description:\s*(?:['"])?([^'"\n]+)(?:['"])?/i)
    if (titleMatch) title = titleMatch[1].trim()
    if (descMatch) description = descMatch[1].trim()
  }

  const safeTitle = title ? JSON.stringify(title) : 'undefined'
  const safeDescription = description ? JSON.stringify(description) : 'undefined'

  content += `  '${slug}': { meta: { title: ${safeTitle}, description: ${safeDescription} } },\n`
})

content += `} as const\n\n`
content += `export type MDXSlug = keyof typeof MDX_PAGES\n`

fs.writeFileSync(out, content)
console.log('Wrote', out)
